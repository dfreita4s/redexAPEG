#lang racket
(require redex)

(define-language Exp
  (e (+ e e)
     (- e e)
     (* e e)
     (/ e e)
     (or e e)
     (if? e e e)
     t
     f
     (let (x e) e) 
     x
     number)
  (x variable-not-otherwise-mentioned)
  (ty num
      bool))

(define-extended-language Exp+Γ Exp
  [Γ · (x : ty Γ)])

(define-judgment-form
  Exp+Γ
  #:mode (types I I O)
  #:contract (types Γ e ty)
 
  [(types Γ e_1 num)
   (types Γ e_2 num)
   -------------------------
   (types Γ (+ e_1 e_2) num)]

  [(types Γ e_1 num)
   (types Γ e_2 num)
   -------------------------
   (types Γ (- e_1 e_2) num)]

  [(types Γ e_1 num)
   (types Γ e_2 num)
   -------------------------
   (types Γ (* e_1 e_2) num)]

  [(types Γ e_1 num)
   (types Γ e_2 num)
   -------------------------
   (types Γ (/ e_1 e_2) num)]  

  [(types Γ e_1 bool)
   (types Γ e_2 bool)
   -------------------------
   (types Γ (or e_1 e_2) bool)]  

  [(types Γ e_1 bool)
   (types Γ e_2 ty)
   (types Γ e_3 ty)
   -------------------------
   (types Γ (if? e_1 e_2 e_3) ty)]  

  [--------------------
   (types Γ number num)]

  [--------------------
   (types Γ t bool)]

  [--------------------
   (types Γ f bool)]

  [
   -----------------------
   (types (x : ty Γ) x ty)]

  [(types Γ e_1 ty_1)
   (types (x : ty_1 Γ) e_2 ty)
   ------------------
   (types  Γ (let (x e_1) e_2) ty)]
  
  [(types Γ x_1 ty_1)
   (side-condition (different x_1 x_2))
   ------------------------------------
   (types (x_2 : ty_2 Γ) x_1 ty_1)] )

(define-metafunction Exp+Γ
  [(different x_1 x_1) #f]
  [(different x_1 x_2) #t])

 (judgment-holds (types · (+ (* 2 3) 0)  ty)  ty)
 (judgment-holds (types · (let (x 3) (let (y t) (let (z 0) y)) ) ty) ty)