; 
; Welcome to Racket v7.5.
; 
PegGEN-CT.rkt> (runTest '() '(0 1 2 3) 2 10 )
; Γ-val: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 2
;   given: 1
;   arguments...:
;    '((X0 #t ()) (X1 #t ()) (X2 #t ()))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:98:63
;   /usr/racket/collects/racket/private/more-scheme.rkt:358:4 hash-update
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:87:0 genGrammar
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:154:0 randPEG-ERR
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:191:8 for-loop
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:190:0 runTest
PegGEN-CT.rkt> 
PegGEN-CT.rkt> (runTest '() '(0 1 2 3) 2 10)
Body ((/ (• X2 0) (* 0)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (/ 1 X2) (/ 2 X0)) #t (X0 X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((/ (/ 2 2) (! 1)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X0 X2)) (X2 #t ()))
 and Δ = #hash((X0 . ((X0 X2) #t X1 X0)) (X1 . (X1)) (X2 . ((X0 X2) X1 (X2) #t X0 X2)))
 and Δ_x = ((X0 X2) X1 (X2) #t X0 X2)

 and Last Δ = #hash((X0 . ((X0 X2) #t X1 X0)) (X1 . (X1)) (X2 . ((X0 X2) X1 (X2) #t X0 X2)))
'((X2 (/ (/ 2 2) (! 1)) (X1 (• (/ 1 X2) (/ 2 X0)) (X0 (/ (• X2 0) (* 0)) ∅))) (/ (• X0 X1) (/ 1 X0)) ((X0 #t (X2)) (X1 #t (X0 X2)) (X2 #t ())))
"Grammar: "'(X2 (/ (/ 2 2) (! 1)) (X1 (• (/ 1 X2) (/ 2 X0)) (X0 (/ (• X2 0) (* 0)) ∅)))

Body ((! (• X2 3)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (• 1 3)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((/ (• ε ε) (/ 1 3)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = ((X2) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
'((X2 (/ (• ε ε) (/ 1 3)) (X1 (! (• 1 3)) (X0 (! (• X2 3)) ∅))) (! (• X2 2)) ((X0 #t (X2)) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (/ (• ε ε) (/ 1 3)) (X1 (! (• 1 3)) (X0 (! (• X2 3)) ∅)))

Body ((• (/ X2 ε) (! 2)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (• X2 3)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((! (/ 1 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 (X2) #t X0 X2)))
 and Δ_x = (X1 (X2) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 (X2) #t X0 X2)))
'((X2 (! (/ 1 2)) (X1 (* (• X2 3)) (X0 (• (/ X2 ε) (! 2)) ∅))) (! (• 2 ε)) ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (! (/ 1 2)) (X1 (* (• X2 3)) (X0 (• (/ X2 ε) (! 2)) ∅)))

Body ((! (• 3 3)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (• 2 0)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (/ X1 X0) (• X1 1)) #t (X0 X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X0 X1) #t X2 X0)) (X1 . ((X0 X1) #t X2 X1)) (X2 . (X2)))
'((X2 (/ (/ X1 X0) (• X1 1)) (X1 (! (• 2 0)) (X0 (! (• 3 3)) ∅))) (! (/ 0 3)) ((X0 #t ()) (X1 #t ()) (X2 #t (X0 X1))))
"Grammar: "'(X2 (/ (/ X1 X0) (• X1 1)) (X1 (! (• 2 0)) (X0 (! (• 3 3)) ∅)))

Body ((• (/ 2 X2) (/ X2 X2)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (! 3) (/ 2 X0)) #t (X2 X0)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((• (/ ε ε) (• ε ε)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X2 X0)) (X2 #t ()))
 and Δ = #hash((X0 . ((X2 X0) #t X1 X0)) (X1 . (X1)) (X2 . ((X2 X0) X1 (X2) #t X0 X2)))
 and Δ_x = ((X2 X0) X1 (X2) #t X0 X2)

 and Last Δ = #hash((X0 . ((X2 X0) #t X1 X0)) (X1 . (X1)) (X2 . ((X2 X0) X1 (X2) #t X0 X2)))
'((X2 (• (/ ε ε) (• ε ε)) (X1 (• (! 3) (/ 2 X0)) (X0 (• (/ 2 X2) (/ X2 X2)) ∅))) (* (• ε 2)) ((X0 #t (X2)) (X1 #t (X2 X0)) (X2 #t ())))
"Grammar: "'(X2 (• (/ ε ε) (• ε ε)) (X1 (• (! 3) (/ 2 X0)) (X0 (• (/ 2 X2) (/ X2 X2)) ∅)))

Body ((• (! 1) (/ X2 ε)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (/ 3 ε) (/ X2 2)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((/ (/ 3 0) (/ 1 ε)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 (X2) #t X0 X2)))
 and Δ_x = (X1 (X2) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 (X2) #t X0 X2)))
'((X2 (/ (/ 3 0) (/ 1 ε)) (X1 (• (/ 3 ε) (/ X2 2)) (X0 (• (! 1) (/ X2 ε)) ∅))) (! (• ε 3)) ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (/ (/ 3 0) (/ 1 ε)) (X1 (• (/ 3 ε) (/ X2 2)) (X0 (• (! 1) (/ X2 ε)) ∅)))

Body ((/ (/ 2 X2) (/ ε ε)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (/ X0 3) (/ ε 3)) #t (X2 X0)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((/ (/ 2 1) (* 3)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X2 X0)) (X2 #t ()))
 and Δ = #hash((X0 . ((X2 X0) #t X1 X0)) (X1 . (X1)) (X2 . ((X2 X0) X1 (X2) #t X0 X2)))
 and Δ_x = ((X2 X0) X1 (X2) #t X0 X2)

 and Last Δ = #hash((X0 . ((X2 X0) #t X1 X0)) (X1 . (X1)) (X2 . ((X2 X0) X1 (X2) #t X0 X2)))
'((X2 (/ (/ 2 1) (* 3)) (X1 (• (/ X0 3) (/ ε 3)) (X0 (/ (/ 2 X2) (/ ε ε)) ∅))) (/ (• 1 X1) (/ 2 X2)) ((X0 #t (X2)) (X1 #t (X2 X0)) (X2 #t ())))
"Grammar: "'(X2 (/ (/ 2 1) (* 3)) (X1 (• (/ X0 3) (/ ε 3)) (X0 (/ (/ 2 X2) (/ ε ε)) ∅)))

Body ((/ (• ε X2) (• 3 3)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (/ 1 X2) (/ 0 X0)) #t (X0 X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((* (• ε 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X0 X2)) (X2 #t ()))
 and Δ = #hash((X0 . ((X0 X2) #t X1 X0)) (X1 . (X1)) (X2 . ((X0 X2) X1 (X2) #t X0 X2)))
 and Δ_x = ((X0 X2) X1 (X2) #t X0 X2)

 and Last Δ = #hash((X0 . ((X0 X2) #t X1 X0)) (X1 . (X1)) (X2 . ((X0 X2) X1 (X2) #t X0 X2)))
'((X2 (* (• ε 2)) (X1 (/ (/ 1 X2) (/ 0 X0)) (X0 (/ (• ε X2) (• 3 3)) ∅))) (! (• 1 3)) ((X0 #t (X2)) (X1 #t (X0 X2)) (X2 #t ())))
"Grammar: "'(X2 (* (• ε 2)) (X1 (/ (/ 1 X2) (/ 0 X0)) (X0 (/ (• ε X2) (• 3 3)) ∅)))

Body ((! (• 2 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (• ε 1)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (* 1) (! 1)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (/ (* 1) (! 1)) (X1 (! (• ε 1)) (X0 (! (• 2 1)) ∅))) (/ (• X0 2) (/ 2 ε)) ((X0 #t ()) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (/ (* 1) (! 1)) (X1 (! (• ε 1)) (X0 (! (• 2 1)) ∅)))

Body ((• (! 3) (* 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (/ 3 1)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (* 2) (• ε 1)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (/ (* 2) (• ε 1)) (X1 (* (/ 3 1)) (X0 (• (! 3) (* 1)) ∅))) (/ (• X0 3) (/ X1 3)) ((X0 #t ()) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (/ (* 2) (• ε 1)) (X1 (* (/ 3 1)) (X0 (• (! 3) (* 1)) ∅)))

PegGEN-CT.rkt> 
PegGEN-CT.rkt> (runTest '() '(0 1 2 3) 2 10)
Body ((* (• 2 X2)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (* 3) (/ X0 ε)) #t (X0)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (/ 1 X0) (/ 2 1)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X0)) (X2 #t ()))
 and Δ = #hash((X0 . ((X0) #t X1 X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X2 (X0) #t X1 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (/ (/ 1 X0) (/ 2 1)) (X1 (• (* 3) (/ X0 ε)) (X0 (* (• 2 X2)) ∅))) (/ (/ 0 X2) (/ 2 X2)) ((X0 #t ()) (X1 #t (X0)) (X2 #t (X0))))
"Grammar: "'(X2 (/ (/ 1 X0) (/ 2 1)) (X1 (• (* 3) (/ X0 ε)) (X0 (* (• 2 X2)) ∅)))

Body ((! (/ 1 2)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (/ 1 3)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (• 1 X1) (/ X1 1)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X2 X1)) (X2 . (X2)))
'((X2 (/ (• 1 X1) (/ X1 1)) (X1 (* (/ 1 3)) (X0 (! (/ 1 2)) ∅))) (! (/ 1 2)) ((X0 #t ()) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (/ (• 1 X1) (/ X1 1)) (X1 (* (/ 1 3)) (X0 (! (/ 1 2)) ∅)))

Body ((/ (• X2 X1) (• 1 2)) #t (X1 X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (/ 3 0)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1 X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1 X2) #t X0 X1)) (X2 . ((X1 X2) #t X0 X2)))
 and Δ_x = ((X1 X2) #t X0 X1)
Body ((• (• X1 X1) (* 0)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X1 X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1 X2) #t X0 X1)) (X2 . ((X1 X2) #t X0 X2)))
 and Δ_x = ((X1 X2) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X1) X2 (X1 X2) #t X0 X1)) (X2 . ((X1 X2) #t X0 X2)))
'((X2 (• (• X1 X1) (* 0)) (X1 (! (/ 3 0)) (X0 (/ (• X2 X1) (• 1 2)) ∅))) (• (/ 0 X1) (/ 3 X1)) ((X0 #t (X1 X2)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (• (• X1 X1) (* 0)) (X1 (! (/ 3 0)) (X0 (/ (• X2 X1) (• 1 2)) ∅)))

Body ((! (• ε 3)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (/ X2 1) (• ε ε)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((• (• X0 X0) (/ ε 2)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X1 X2)))
 and Δ_x = ((X2) #t X1 X2)

 and Last Δ = #hash((X0 . ((X0) #t X2 X0)) (X1 . (X1)) (X2 . ((X2) #t X1 X2)))
'((X2 (• (• X0 X0) (/ ε 2)) (X1 (/ (/ X2 1) (• ε ε)) (X0 (! (• ε 3)) ∅))) (/ (• 3 3) (• X2 X0)) ((X0 #t ()) (X1 #t (X0 X2)) (X2 #t (X0))))
"Grammar: "'(X2 (• (• X0 X0) (/ ε 2)) (X1 (/ (/ X2 1) (• ε ε)) (X0 (! (• ε 3)) ∅)))

Body ((• (/ 3 ε) (/ ε 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (• ε 0)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((! (/ 0 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (! (/ 0 2)) (X1 (! (• ε 0)) (X0 (• (/ 3 ε) (/ ε 1)) ∅))) (/ (• 3 ε) (! 1)) ((X0 #t ()) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (! (/ 0 2)) (X1 (! (• ε 0)) (X0 (• (/ 3 ε) (/ ε 1)) ∅)))

Body ((! (• X2 1)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (/ 0 0) (/ X2 ε)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((! (• ε 3)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 (X2) #t X0 X2)))
 and Δ_x = (X1 (X2) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 (X2) #t X0 X2)))
'((X2 (! (• ε 3)) (X1 (/ (/ 0 0) (/ X2 ε)) (X0 (! (• X2 1)) ∅))) (/ (• X1 3) (/ ε X2)) ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (! (• ε 3)) (X1 (/ (/ 0 0) (/ X2 ε)) (X0 (! (• X2 1)) ∅)))

Body ((/ (/ 0 2) (* 3)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• ε 1) (/ 0 X2)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (/ 1 ε) (• 0 ε)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X1 X2)))
 and Δ_x = ((X2) #t X1 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X1 X2)))
'((X2 (/ (/ 1 ε) (• 0 ε)) (X1 (/ (• ε 1) (/ 0 X2)) (X0 (/ (/ 0 2) (* 3)) ∅))) (* (• 1 ε)) ((X0 #t ()) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (/ (/ 1 ε) (• 0 ε)) (X1 (/ (• ε 1) (/ 0 X2)) (X0 (/ (/ 0 2) (* 3)) ∅)))

Body ((* (/ 0 2)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (• 1 X0)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((* (• X0 2)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X0) #t X2 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (* (• X0 2)) (X1 (! (• 1 X0)) (X0 (* (/ 0 2)) ∅))) (/ (* 3) (• X2 X2)) ((X0 #t ()) (X1 #t ()) (X2 #t (X0))))
"Grammar: "'(X2 (* (• X0 2)) (X1 (! (• 1 X0)) (X0 (* (/ 0 2)) ∅)))

Body ((/ (/ X2 0) (/ 2 0)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (/ X2 ε) (/ 2 ε)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((• (/ ε ε) (! 0)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 (X2) #t X0 X2)))
 and Δ_x = (X1 (X2) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 (X2) #t X0 X2)))
'((X2 (• (/ ε ε) (! 0)) (X1 (• (/ X2 ε) (/ 2 ε)) (X0 (/ (/ X2 0) (/ 2 0)) ∅))) (• (/ 0 ε) (* 1)) ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (• (/ ε ε) (! 0)) (X1 (• (/ X2 ε) (/ 2 ε)) (X0 (/ (/ X2 0) (/ 2 0)) ∅)))

Body ((• (/ 1 X1) (! 2)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (/ 1 2)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . (X2)))
 and Δ_x = ((X1) #t X0 X1)
Body ((• (/ 3 X1) (! 0)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X2 (X1) #t X0 X1)) (X2 . (X2)))
'((X2 (• (/ 3 X1) (! 0)) (X1 (! (/ 1 2)) (X0 (• (/ 1 X1) (! 2)) ∅))) (/ (• 1 1) (* 2)) ((X0 #t (X1)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (• (/ 3 X1) (! 0)) (X1 (! (/ 1 2)) (X0 (• (/ 1 X1) (! 2)) ∅)))

PegGEN-CT.rkt> (runTest '() '(0 1 2 3) 2 10)
Body ((! (/ 2 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• ε 0) (! 1)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((! (• ε 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (! (• ε 2)) (X1 (/ (• ε 0) (! 1)) (X0 (! (/ 2 1)) ∅))) (/ (• ε ε) (/ X0 2)) ((X0 #t ()) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (! (• ε 2)) (X1 (/ (• ε 0) (! 1)) (X0 (! (/ 2 1)) ∅)))

Body ((• (! 0) (• ε X2)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (/ 1 0)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((/ (! 1) (/ ε X1)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = ((X2) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X2 X1)) (X2 . ((X2) #t X0 X2)))
'((X2 (/ (! 1) (/ ε X1)) (X1 (* (/ 1 0)) (X0 (• (! 0) (• ε X2)) ∅))) (* (/ 2 0)) ((X0 #t (X1 X2)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (/ (! 1) (/ ε X1)) (X1 (* (/ 1 0)) (X0 (• (! 0) (• ε X2)) ∅)))

Body ((* (• 1 X2)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• X2 1) (* 2)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((• (/ ε 3) (• ε X0)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X1 X2)))
 and Δ_x = ((X2) #t X1 X2)

 and Last Δ = #hash((X0 . ((X0) #t X2 X0)) (X1 . (X1)) (X2 . ((X2) #t X1 X2)))
'((X2 (• (/ ε 3) (• ε X0)) (X1 (/ (• X2 1) (* 2)) (X0 (* (• 1 X2)) ∅))) (• (* 0) (* 0)) ((X0 #t ()) (X1 #t (X0 X2)) (X2 #t (X0))))
"Grammar: "'(X2 (• (/ ε 3) (• ε X0)) (X1 (/ (• X2 1) (* 2)) (X0 (* (• 1 X2)) ∅)))

Body ((/ (• 0 X1) (/ 1 X2)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• 3 X2) (/ 3 ε)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = (X1)
Body ((/ (/ 2 X1) (/ ε X1)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X0 X2)))
 and Δ_x = ((X2) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X2 X1)) (X2 . ((X2) #t X0 X2)))
'((X2 (/ (/ 2 X1) (/ ε X1)) (X1 (/ (• 3 X2) (/ 3 ε)) (X0 (/ (• 0 X1) (/ 1 X2)) ∅))) (/ (• ε X1) (! 3)) ((X0 #t (X1 X2)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (/ (/ 2 X1) (/ ε X1)) (X1 (/ (• 3 X2) (/ 3 ε)) (X0 (/ (• 0 X1) (/ 1 X2)) ∅)))

Body ((! (• X1 3)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (/ 0 2)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . (X2)))
 and Δ_x = ((X1) #t X0 X1)
Body ((* (• 1 X0)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . (X2)))
'((X2 (* (• 1 X0)) (X1 (! (/ 0 2)) (X0 (! (• X1 3)) ∅))) (/ (• X0 ε) (* 0)) ((X0 #t (X1)) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (* (• 1 X0)) (X1 (! (/ 0 2)) (X0 (! (• X1 3)) ∅)))

Body ((! (/ 2 0)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (/ 2 X2) (• X2 ε)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (• X0 X0) (/ 1 3)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X2) #t X1 X2)))
 and Δ_x = ((X2) #t X1 X2)

 and Last Δ = #hash((X0 . ((X0) #t X2 X0)) (X1 . (X1)) (X2 . ((X2) #t X1 X2)))
'((X2 (/ (• X0 X0) (/ 1 3)) (X1 (• (/ 2 X2) (• X2 ε)) (X0 (! (/ 2 0)) ∅))) (/ (/ 1 2) (! 0)) ((X0 #t ()) (X1 #t (X0 X2)) (X2 #t (X0))))
"Grammar: "'(X2 (/ (• X0 X0) (/ 1 3)) (X1 (• (/ 2 X2) (• X2 ε)) (X0 (! (/ 2 0)) ∅)))

Body ((/ (/ X1 X2) (/ 1 1)) #t (X2 X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (/ ε X2) (• ε X2)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X2 X1) #t X0 X1)) (X2 . ((X2 X1) #t X0 X2)))
 and Δ_x = ((X2 X1) #t X0 X1)
Body ((/ (/ 1 ε) (* 3)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X2 X1) #t X0 X1)) (X2 . ((X2) X1 (X2 X1) #t X0 X2)))
 and Δ_x = ((X2) X1 (X2 X1) #t X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X2 X1) #t X0 X1)) (X2 . ((X2) X1 (X2 X1) #t X0 X2)))
'((X2 (/ (/ 1 ε) (* 3)) (X1 (/ (/ ε X2) (• ε X2)) (X0 (/ (/ X1 X2) (/ 1 1)) ∅))) (! (• ε 1)) ((X0 #t (X2 X1)) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (/ (/ 1 ε) (* 3)) (X1 (/ (/ ε X2) (• ε X2)) (X0 (/ (/ X1 X2) (/ 1 1)) ∅)))

Body ((• (• X1 ε) (/ ε 2)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (/ ε ε) (• X2 2)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . (X2)))
 and Δ_x = ((X1) #t X0 X1)
Body ((! (• X0 0)) #t (X2 X1 X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . ((X2) #t X1 X2)))
 and Δ_x = ((X2) #t X1 X2)

 and Last Δ = #hash((X0 . ((X2 X1 X0) #t X2 X0)) (X1 . ((X2 X1 X0) X2 (X1) #t X0 X1)) (X2 . ((X2 X1 X0) (X2) #t X1 X2)))
'((X2 (! (• X0 0)) (X1 (/ (/ ε ε) (• X2 2)) (X0 (• (• X1 ε) (/ ε 2)) ∅))) (/ (/ 1 3) (! 1)) ((X0 #t (X0 X2 X1)) (X1 #t (X0 X1 X2)) (X2 #t (X2 X1 X0))))
"Grammar: "'(X2 (! (• X0 0)) (X1 (/ (/ ε ε) (• X2 2)) (X0 (• (• X1 ε) (/ ε 2)) ∅)))

Body ((/ (/ 2 0) (• X1 ε)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (! 1) (• ε 3)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . (X2)))
 and Δ_x = ((X1) #t X0 X1)
Body ((/ (/ 1 X0) (• 2 0)) #t (X0 X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X1) #t X0 X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X0 X1) #t X2 X0)) (X1 . ((X0 X1) X2 (X1) #t X0 X1)) (X2 . (X2)))
'((X2 (/ (/ 1 X0) (• 2 0)) (X1 (/ (! 1) (• ε 3)) (X0 (/ (/ 2 0) (• X1 ε)) ∅))) (* (• ε 1)) ((X0 #t (X1)) (X1 #t ()) (X2 #t (X0 X1))))
"Grammar: "'(X2 (/ (/ 1 X0) (• 2 0)) (X1 (/ (! 1) (• ε 3)) (X0 (/ (/ 2 0) (• X1 ε)) ∅)))

Body ((! (• 0 2)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (/ 2 1)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (/ ε X0) (• X0 3)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X0) #t X2 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (/ (/ ε X0) (• X0 3)) (X1 (! (/ 2 1)) (X0 (! (• 0 2)) ∅))) (• (• X2 ε) (* 2)) ((X0 #t ()) (X1 #t ()) (X2 #t (X0))))
"Grammar: "'(X2 (/ (/ ε X0) (• X0 3)) (X1 (! (/ 2 1)) (X0 (! (• 0 2)) ∅)))

PegGEN-CT.rkt> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:98:99: xs: unbound identifier
;   in: xs
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/.emacs.d/elpa/racket-mode-20220125.1340/racket/syntax.rkt:66:0
> 
PegGEN-CT.rkt> (runTest '() '(0 1 2 3) 2 10)
Body ((• (/ X1 3) (• X2 X2)) #t (X2 X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (/ 0 0)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X2 X1)) X0 X1)) (X2 . ((X0 #t (X2 X1)) X0 X2)))
 and Δ_x = ((X0 #t (X2 X1)) X0 X1)
Body ((/ (• X1 X1) (• 0 2)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X2 X1)) X0 X1)) (X2 . ((X0 #t (X2 X1)) X0 X2)))
 and Δ_x = ((X0 #t (X2 X1)) X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X2 #t (X1)) X2 (X0 #t (X2 X1)) X0 X1)) (X2 . ((X0 #t (X2 X1)) X0 X2)))
'((X2 (/ (• X1 X1) (• 0 2)) (X1 (* (/ 0 0)) (X0 (• (/ X1 3) (• X2 X2)) ∅))) (! (/ 2 2)) ((X0 #t (X2 X1)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (/ (• X1 X1) (• 0 2)) (X1 (* (/ 0 0)) (X0 (• (/ X1 3) (• X2 X2)) ∅)))

Body ((/ (• 1 ε) (* 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• X0 3) (! 3)) #t (X0)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((! (/ 1 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X0)) (X2 #t ()))
 and Δ = #hash((X0 . ((X1 #t (X0)) X1 X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X1 #t (X0)) X1 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (! (/ 1 2)) (X1 (/ (• X0 3) (! 3)) (X0 (/ (• 1 ε) (* 1)) ∅))) (/ (/ X0 2) (• ε X2)) ((X0 #t ()) (X1 #t (X0)) (X2 #t ())))
"Grammar: "'(X2 (! (/ 1 2)) (X1 (/ (• X0 3) (! 3)) (X0 (/ (• 1 ε) (* 1)) ∅)))

Body ((/ (* 0) (• X2 0)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (• 0 0)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = (X1)
Body ((/ (! 0) (• ε 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = ((X0 #t (X2)) X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
'((X2 (/ (! 0) (• ε 2)) (X1 (! (• 0 0)) (X0 (/ (* 0) (• X2 0)) ∅))) (• (• X2 ε) (/ X0 3)) ((X0 #t (X2)) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (/ (! 0) (• ε 2)) (X1 (! (• 0 0)) (X0 (/ (* 0) (• X2 0)) ∅)))

Body ((* (• X1 2)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• X2 0) (! 1)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = ((X0 #t (X1)) X0 X1)
Body ((/ (/ 1 3) (/ 0 X0)) #t (X2 X1 X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . ((X1 #t (X2)) X1 X2)))
 and Δ_x = ((X1 #t (X2)) X1 X2)

 and Last Δ = #hash((X0 . ((X2 #t (X2 X1 X0)) X2 X0)) (X1 . ((X2 #t (X2 X1 X0)) X2 (X0 #t (X1)) X0 X1)) (X2 . ((X2 #t (X2 X1 X0)) (X1 #t (X2)) X1 X2)))
'((X2 (/ (/ 1 3) (/ 0 X0)) (X1 (/ (• X2 0) (! 1)) (X0 (* (• X1 2)) ∅))) (* (• 1 3)) ((X0 #t (X0 X2 X1)) (X1 #t (X0 X1 X2)) (X2 #t (X2 X1 X0))))
"Grammar: "'(X2 (/ (/ 1 3) (/ 0 X0)) (X1 (/ (• X2 0) (! 1)) (X0 (* (• X1 2)) ∅)))

Body ((* (• 3 X1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• ε 1) (/ X0 2)) #t (X0)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((• (/ X0 3) (/ 0 ε)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X0)) (X2 #t ()))
 and Δ = #hash((X0 . ((X1 #t (X0)) X1 X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X2 #t (X0)) X2 (X1 #t (X0)) X1 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (• (/ X0 3) (/ 0 ε)) (X1 (/ (• ε 1) (/ X0 2)) (X0 (* (• 3 X1)) ∅))) (* (• X2 2)) ((X0 #t ()) (X1 #t (X0)) (X2 #t (X0))))
"Grammar: "'(X2 (• (/ X0 3) (/ 0 ε)) (X1 (/ (• ε 1) (/ X0 2)) (X0 (* (• 3 X1)) ∅)))

Body ((/ (• 2 X1) (• ε ε)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• X2 2) (/ 2 X2)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((• (* 3) (/ 1 X0)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X1 #t (X2)) X1 X2)))
 and Δ_x = ((X1 #t (X2)) X1 X2)

 and Last Δ = #hash((X0 . ((X2 #t (X0)) X2 X0)) (X1 . (X1)) (X2 . ((X1 #t (X2)) X1 X2)))
'((X2 (• (* 3) (/ 1 X0)) (X1 (/ (• X2 2) (/ 2 X2)) (X0 (/ (• 2 X1) (• ε ε)) ∅))) (* (/ 1 2)) ((X0 #t ()) (X1 #t (X0 X2)) (X2 #t (X0))))
"Grammar: "'(X2 (• (* 3) (/ 1 X0)) (X1 (/ (• X2 2) (/ 2 X2)) (X0 (/ (• 2 X1) (• ε ε)) ∅)))

Body ((/ (/ ε X1) (/ ε X1)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (• 2 X2)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = ((X0 #t (X1)) X0 X1)
Body ((/ (/ 1 ε) (• X1 X0)) #t (X1 X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X2 #t (X1 X0)) X2 X0)) (X1 . ((X2 #t (X1 X0)) X2 (X0 #t (X1)) X0 X1)) (X2 . (X2)))
'((X2 (/ (/ 1 ε) (• X1 X0)) (X1 (! (• 2 X2)) (X0 (/ (/ ε X1) (/ ε X1)) ∅))) (• (* 0) (* 2)) ((X0 #t (X1)) (X1 #t ()) (X2 #t (X1 X0))))
"Grammar: "'(X2 (/ (/ 1 ε) (• X1 X0)) (X1 (! (• 2 X2)) (X0 (/ (/ ε X1) (/ ε X1)) ∅)))

Body ((* (• 2 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (/ X0 ε) (/ X0 0)) #t (X0)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (• X0 1) (! 2)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X0)) (X2 #t ()))
 and Δ = #hash((X0 . ((X1 #t (X0)) X1 X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X2 #t (X0)) X2 (X1 #t (X0)) X1 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (/ (• X0 1) (! 2)) (X1 (• (/ X0 ε) (/ X0 0)) (X0 (* (• 2 1)) ∅))) (* (• 2 X1)) ((X0 #t ()) (X1 #t (X0)) (X2 #t (X0))))
"Grammar: "'(X2 (/ (• X0 1) (! 2)) (X1 (• (/ X0 ε) (/ X0 0)) (X0 (* (• 2 1)) ∅)))

Body ((• (! 0) (/ X2 X2)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (• X2 3)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = (X1)
Body ((/ (• ε 3) (* 1)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X1 #t (X2)) X1 (X0 #t (X2)) X0 X2)))
 and Δ_x = ((X1 #t (X2)) X1 (X0 #t (X2)) X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X1 #t (X2)) X1 (X0 #t (X2)) X0 X2)))
'((X2 (/ (• ε 3) (* 1)) (X1 (* (• X2 3)) (X0 (• (! 0) (/ X2 X2)) ∅))) (/ (/ X1 3) (! 1)) ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (/ (• ε 3) (* 1)) (X1 (* (• X2 3)) (X0 (• (! 0) (/ X2 X2)) ∅)))

Body ((! (• X1 3)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (! 1) (/ 3 ε)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = ((X0 #t (X1)) X0 X1)
Body ((! (• ε 0)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
'((X2 (! (• ε 0)) (X1 (• (! 1) (/ 3 ε)) (X0 (! (• X1 3)) ∅))) (• (• X0 X1) (! 1)) ((X0 #t (X1)) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (! (• ε 0)) (X1 (• (! 1) (/ 3 ε)) (X0 (! (• X1 3)) ∅)))

PegGEN-CT.rkt> (runTest '() '(0 1 2 3) 2 10)
Body ((! (• 0 0)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (/ 3 3)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((• (• X0 X0) (* 3)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . ((X2 #t (X0)) X2 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (• (• X0 X0) (* 3)) (X1 (* (/ 3 3)) (X0 (! (• 0 0)) ∅))) (! (• 2 3)) ((X0 #t ()) (X1 #t ()) (X2 #t (X0))))
"Grammar: "'(X2 (• (• X0 X0) (* 3)) (X1 (* (/ 3 3)) (X0 (! (• 0 0)) ∅)))

Body ((* (• X2 3)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (! 1) (* 1)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = (X1)
Body ((• (/ 3 ε) (* 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = ((X0 #t (X2)) X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
'((X2 (• (/ 3 ε) (* 2)) (X1 (/ (! 1) (* 1)) (X0 (* (• X2 3)) ∅))) (/ (/ ε X1) (/ 1 2)) ((X0 #t (X2)) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (• (/ 3 ε) (* 2)) (X1 (/ (! 1) (* 1)) (X0 (* (• X2 3)) ∅)))

Body ((/ (* 1) (/ 1 X1)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (* 0) (/ ε 3)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = ((X0 #t (X1)) X0 X1)
Body ((/ (• 3 1) (/ 0 X1)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X2 #t (X1)) X2 (X0 #t (X1)) X0 X1)) (X2 . (X2)))
'((X2 (/ (• 3 1) (/ 0 X1)) (X1 (• (* 0) (/ ε 3)) (X0 (/ (* 1) (/ 1 X1)) ∅))) (/ (• 2 X2) (! 3)) ((X0 #t (X1)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (/ (• 3 1) (/ 0 X1)) (X1 (• (* 0) (/ ε 3)) (X0 (/ (* 1) (/ 1 X1)) ∅)))

Body ((/ (• 2 0) (! 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (! 1) (/ 1 ε)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((! (/ 3 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (! (/ 3 2)) (X1 (/ (! 1) (/ 1 ε)) (X0 (/ (• 2 0) (! 1)) ∅))) (! (• X0 3)) ((X0 #t ()) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (! (/ 3 2)) (X1 (/ (! 1) (/ 1 ε)) (X0 (/ (• 2 0) (! 1)) ∅)))

Body ((/ (! 3) (/ 1 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• 3 1) (• ε X2)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((* (/ 3 3)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X1 #t (X2)) X1 X2)))
 and Δ_x = ((X1 #t (X2)) X1 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X1 #t (X2)) X1 X2)))
'((X2 (* (/ 3 3)) (X1 (/ (• 3 1) (• ε X2)) (X0 (/ (! 3) (/ 1 1)) ∅))) (! (/ 3 1)) ((X0 #t ()) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (* (/ 3 3)) (X1 (/ (• 3 1) (• ε X2)) (X0 (/ (! 3) (/ 1 1)) ∅)))

Body ((• (* 0) (• ε X1)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (• X2 ε) (! 3)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = ((X0 #t (X1)) X0 X1)
Body ((* (• ε 0)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . ((X1 #t (X2)) X1 X2)))
 and Δ_x = ((X1 #t (X2)) X1 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . ((X1 #t (X2)) X1 X2)))
'((X2 (* (• ε 0)) (X1 (• (• X2 ε) (! 3)) (X0 (• (* 0) (• ε X1)) ∅))) (• (! 0) (! 2)) ((X0 #t (X2 X1)) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (* (• ε 0)) (X1 (• (• X2 ε) (! 3)) (X0 (• (* 0) (• ε X1)) ∅)))

Body ((/ (* 2) (• ε X1)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (* 2) (/ X2 3)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . (X2)))
 and Δ_x = ((X0 #t (X1)) X0 X1)
Body ((• (• X0 ε) (/ 1 X0)) #t (X2 X1 X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X1)) X0 X1)) (X2 . ((X1 #t (X2)) X1 X2)))
 and Δ_x = ((X1 #t (X2)) X1 X2)

 and Last Δ = #hash((X0 . ((X2 #t (X2 X1 X0)) X2 X0)) (X1 . ((X2 #t (X2 X1 X0)) X2 (X0 #t (X1)) X0 X1)) (X2 . ((X2 #t (X2 X1 X0)) (X1 #t (X2)) X1 X2)))
'((X2 (• (• X0 ε) (/ 1 X0)) (X1 (/ (* 2) (/ X2 3)) (X0 (/ (* 2) (• ε X1)) ∅))) (! (• 0 X0)) ((X0 #t (X0 X2 X1)) (X1 #t (X0 X1 X2)) (X2 #t (X2 X1 X0))))
"Grammar: "'(X2 (• (• X0 ε) (/ 1 X0)) (X1 (/ (* 2) (/ X2 3)) (X0 (/ (* 2) (• ε X1)) ∅)))

Body ((• (• ε ε) (/ X2 X1)) #t (X2 X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (* 1) (• ε ε)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X2 X1)) X0 X1)) (X2 . ((X0 #t (X2 X1)) X0 X2)))
 and Δ_x = ((X0 #t (X2 X1)) X0 X1)
Body ((/ (! 3) (/ ε 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X2 X1)) X0 X1)) (X2 . ((X0 #t (X2 X1)) X0 X2)))
 and Δ_x = ((X0 #t (X2 X1)) X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X0 #t (X2 X1)) X0 X1)) (X2 . ((X0 #t (X2 X1)) X0 X2)))
'((X2 (/ (! 3) (/ ε 2)) (X1 (/ (* 1) (• ε ε)) (X0 (• (• ε ε) (/ X2 X1)) ∅))) (/ (/ 1 1) (/ X1 X0)) ((X0 #t (X2 X1)) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (/ (! 3) (/ ε 2)) (X1 (/ (* 1) (• ε ε)) (X0 (• (• ε ε) (/ X2 X1)) ∅)))

Body ((• (* 0) (/ X2 3)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (• 1 ε)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = (X1)
Body ((* (• X1 3)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = ((X0 #t (X2)) X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . ((X2 #t (X1)) X2 X1)) (X2 . ((X0 #t (X2)) X0 X2)))
'((X2 (* (• X1 3)) (X1 (* (• 1 ε)) (X0 (• (* 0) (/ X2 3)) ∅))) (! (• 0 3)) ((X0 #t (X1 X2)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (* (• X1 3)) (X1 (* (• 1 ε)) (X0 (• (* 0) (/ X2 3)) ∅)))

Body ((/ (• 2 1) (• X2 ε)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• ε 0) (/ 3 ε)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = (X1)
Body ((/ (/ 1 0) (* 0)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
 and Δ_x = ((X0 #t (X2)) X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . ((X0 #t (X2)) X0 X2)))
'((X2 (/ (/ 1 0) (* 0)) (X1 (/ (• ε 0) (/ 3 ε)) (X0 (/ (• 2 1) (• X2 ε)) ∅))) (/ (• 0 X1) (/ X0 2)) ((X0 #t (X2)) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (/ (/ 1 0) (* 0)) (X1 (/ (• ε 0) (/ 3 ε)) (X0 (/ (• 2 1) (• X2 ε)) ∅)))

PegGEN-CT.rkt> 
PegGEN-CT.rkt> (runTest '() '(0 1 2 3) 2 10)
Body ((• (* 1) (• X2 X2)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((• (! 2) (• ε X2)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X0 X2)))
 and Δ_x = (X1)
Body ((• (• ε ε) (* 3)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 X0 X2)))
 and Δ_x = (X1 X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 X0 X2)))
'((X2 (• (• ε ε) (* 3)) (X1 (• (! 2) (• ε X2)) (X0 (• (* 1) (• X2 X2)) ∅))) (/ (• X2 2) (! 2)) ((X0 #t (X2)) (X1 #t (X2)) (X2 #t ())))
"Grammar: "'(X2 (• (• ε ε) (* 3)) (X1 (• (! 2) (• ε X2)) (X0 (• (* 1) (• X2 X2)) ∅)))

Body ((/ (/ 2 0) (* 3)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (/ 1 0) (• X0 ε)) #t (X0)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (! 1) (• 1 2)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X0)) (X2 #t ()))
 and Δ = #hash((X0 . (X1 X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X1 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (/ (! 1) (• 1 2)) (X1 (/ (/ 1 0) (• X0 ε)) (X0 (/ (/ 2 0) (* 3)) ∅))) (/ (* 1) (• X1 X0)) ((X0 #t ()) (X1 #t (X0)) (X2 #t ())))
"Grammar: "'(X2 (/ (! 1) (• 1 2)) (X1 (/ (/ 1 0) (• X0 ε)) (X0 (/ (/ 2 0) (* 3)) ∅)))

Body ((• (! 0) (/ 2 X2)) #t (X2)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (• ε 0)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X0 X2)))
 and Δ_x = (X1)
Body ((/ (• 1 2) (• X1 ε)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X0 X2)))
 and Δ_x = (X0 X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X2 X1)) (X2 . (X0 X2)))
'((X2 (/ (• 1 2) (• X1 ε)) (X1 (! (• ε 0)) (X0 (• (! 0) (/ 2 X2)) ∅))) (/ (• 2 X1) (• X2 ε)) ((X0 #t (X1 X2)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (/ (• 1 2) (• X1 ε)) (X1 (! (• ε 0)) (X0 (• (! 0) (/ 2 X2)) ∅)))

Body ((/ (• 3 2) (* 0)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((! (/ 1 2)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((! (/ 3 1)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (! (/ 3 1)) (X1 (! (/ 1 2)) (X0 (/ (• 3 2) (* 0)) ∅))) (* (• X2 3)) ((X0 #t ()) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (! (/ 3 1)) (X1 (! (/ 1 2)) (X0 (/ (• 3 2) (* 0)) ∅)))

Body ((* (• 3 0)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (• X2 0)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (• X0 2) (* 2)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X1 X2)))
 and Δ_x = (X1 X2)

 and Last Δ = #hash((X0 . (X2 X0)) (X1 . (X1)) (X2 . (X1 X2)))
'((X2 (/ (• X0 2) (* 2)) (X1 (* (• X2 0)) (X0 (* (• 3 0)) ∅))) (* (• ε 0)) ((X0 #t ()) (X1 #t (X0 X2)) (X2 #t (X0))))
"Grammar: "'(X2 (/ (• X0 2) (* 2)) (X1 (* (• X2 0)) (X0 (* (• 3 0)) ∅)))

Body ((! (/ 1 0)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((* (• 3 2)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((! (• X0 3)) #t (X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X2 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (! (• X0 3)) (X1 (* (• 3 2)) (X0 (! (/ 1 0)) ∅))) (/ (! 1) (• X2 2)) ((X0 #t ()) (X1 #t ()) (X2 #t (X0))))
"Grammar: "'(X2 (! (• X0 3)) (X1 (* (• 3 2)) (X0 (! (/ 1 0)) ∅)))

Body ((! (• ε 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (* 3) (/ 2 2)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((/ (/ 2 3) (* 3)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (/ (/ 2 3) (* 3)) (X1 (/ (* 3) (/ 2 2)) (X0 (! (• ε 1)) ∅))) (/ (/ 2 1) (/ ε 0)) ((X0 #t ()) (X1 #t ()) (X2 #t ())))
"Grammar: "'(X2 (/ (/ 2 3) (* 3)) (X1 (/ (* 3) (/ 2 2)) (X0 (! (• ε 1)) ∅)))

Body ((/ (/ ε ε) (• X1 3)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• X2 0) (! 0)) #t (X2)) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X0 X1)) (X2 . (X2)))
 and Δ_x = (X0 X1)
Body ((* (• X0 2)) #t (X2 X1 X0)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X2 X1)) (X1 #t (X2)) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X0 X1)) (X2 . (X1 X2)))
 and Δ_x = (X1 X2)

 and Last Δ = #hash((X0 . (X2 X0)) (X1 . (X2 X0 X1)) (X2 . (X1 X2)))
'((X2 (* (• X0 2)) (X1 (/ (• X2 0) (! 0)) (X0 (/ (/ ε ε) (• X1 3)) ∅))) (! (/ 2 3)) ((X0 #t (X0 X2 X1)) (X1 #t (X0 X1 X2)) (X2 #t (X2 X1 X0))))
"Grammar: "'(X2 (* (• X0 2)) (X1 (/ (• X2 0) (! 0)) (X0 (/ (/ ε ε) (• X1 3)) ∅)))

Body ((! (• 0 1)) #t ()) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (• 1 1) (• X0 X0)) #t (X0)) Generated for (X1 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X1)
Body ((* (• ε 3)) #t ()) Generated for (X2 #t ())
 With Γ = ((X0 #t ()) (X1 #t (X0)) (X2 #t ()))
 and Δ = #hash((X0 . (X1 X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X1 X0)) (X1 . (X1)) (X2 . (X2)))
'((X2 (* (• ε 3)) (X1 (/ (• 1 1) (• X0 X0)) (X0 (! (• 0 1)) ∅))) (/ (* 1) (* 2)) ((X0 #t ()) (X1 #t (X0)) (X2 #t ())))
"Grammar: "'(X2 (* (• ε 3)) (X1 (/ (• 1 1) (• X0 X0)) (X0 (! (• 0 1)) ∅)))

Body ((• (! 3) (• ε X1)) #t (X1)) Generated for (X0 #t ())
 With Γ = ((X0 #t ()) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X1)) (X2 . (X2)))
 and Δ_x = (X0)
Body ((/ (/ 1 2) (* 3)) #t ()) Generated for (X1 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X0 X1)) (X2 . (X2)))
 and Δ_x = (X0 X1)
Body ((* (• X1 0)) #t (X1)) Generated for (X2 #t ())
 With Γ = ((X0 #t (X1)) (X1 #t ()) (X2 #t ()))
 and Δ = #hash((X0 . (X0)) (X1 . (X0 X1)) (X2 . (X2)))
 and Δ_x = (X2)

 and Last Δ = #hash((X0 . (X0)) (X1 . (X2 X0 X1)) (X2 . (X2)))
'((X2 (* (• X1 0)) (X1 (/ (/ 1 2) (* 3)) (X0 (• (! 3) (• ε X1)) ∅))) (* (• 2 2)) ((X0 #t (X1)) (X1 #t ()) (X2 #t (X1))))
"Grammar: "'(X2 (* (• X1 0)) (X1 (/ (/ 1 2) (* 3)) (X0 (• (! 3) (• ε X1)) ∅)))

PegGEN-CT.rkt> 
PegGEN-CT.rkt> (lambda (x y) (- x y)) 1 2
#<procedure:PegGEN-CT.rkt:9:0>
1
2
PegGEN-CT.rkt> ((lambda (x y) (- x y)) 1 2)
-1
PegGEN-CT.rkt> ((lambda (x y) (- x y)) 3 1)
2
PegGEN-CT.rkt> 
PegGEN-CT.rkt> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:137:30: member?: unbound identifier
;   in: member?
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/.emacs.d/elpa/racket-mode-20220125.1340/racket/syntax.rkt:66:0
> (member? 2 '(1 3 4))
; member?: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
> (member 2 '(1 3 4))
#f
> (member 2 '(1 2 3 4))
'(2 3 4)
> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:142:30: member?: unbound identifier
;   in: member?
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/.emacs.d/elpa/racket-mode-20220125.1340/racket/syntax.rkt:66:0
> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:147:30: Δ-up: unbound identifier
;   in: Δ-up
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/.emacs.d/elpa/racket-mode-20220125.1340/racket/syntax.rkt:66:0
> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:142:2: ̣#f: unbound identifier
;   in: ̣#f
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/.emacs.d/elpa/racket-mode-20220125.1340/racket/syntax.rkt:66:0
> 
PegGEN-CT.rkt> (elem? 1 '(2 3 4 5))
; cdr: contract violation
;   expected: pair?
;   given: '()
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:136:0 elem?
PegGEN-CT.rkt> 
PegGEN-CT.rkt> (elem? 1 '(2 3 4 5))
#f
PegGEN-CT.rkt> (elem? 1 '(2 3 4 5 1))
#f
PegGEN-CT.rkt> 
PegGEN-CT.rkt> (elem? 1 '(2 3 4 5 1))
#t
PegGEN-CT.rkt> (elem? 1 '(2 3 4 5 ))
#f
PegGEN-CT.rkt> (elem? 1 '(2 3 4 5 1))
#t
PegGEN-CT.rkt> (elem? 1 '(2 3 4 1 5 ))
#t
PegGEN-CT.rkt> (elem? 1 '(1 2 3 4 5 ))
#t
PegGEN-CT.rkt> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:143:52: ΓEtnry: unbound identifier
;   in: ΓEtnry
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/.emacs.d/elpa/racket-mode-20220125.1340/racket/syntax.rkt:66:0
> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:209:24: A: unbound identifier
;   in: A
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/.emacs.d/elpa/racket-mode-20220125.1340/racket/syntax.rkt:66:0
> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:209:59: #%app: missing procedure expression;
;  probably originally (), which is an illegal empty application
;   in: (#%app)
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/.emacs.d/elpa/racket-mode-20220125.1340/racket/syntax.rkt:66:0
> 
; application: not a procedure;
;  expected a procedure that can be applied to arguments
;   given: 'B
;   arguments...:
;    'D
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; Δ-up: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 4
;   given: 3
;   arguments...:
;    '()
;    ''D
;    '#hash(('D . ('D)) (A . (A)) (C . (C)) (B . (B)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; Δ-up: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 4
;   given: 3
;   arguments...:
;    '()
;    'D
;    '#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; Δ-up: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 4
;   given: 3
;   arguments...:
;    '()
;    'D
;    '#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; Δ-up: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 4
;   given: 3
;   arguments...:
;    '()
;    'D
;    '#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; Δ-up: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 4
;   given: 3
;   arguments...:
;    '()
;    'D
;    '#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; user break
> 
; Δ-up: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 4
;   given: 3
;   arguments...:
;    '()
;    'D
;    '#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; Δ-up: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 4
;   given: 3
;   arguments...:
;    '()
;    'D
;    '#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; Δ-up: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 4
;   given: 3
;   arguments...:
;    '()
;    'D
;    '#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; caddr: contract violation
;   expected: (cons/c any/c (cons/c any/c pair?))
;   given: 'C
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:143:17
;   /usr/racket/collects/racket/private/list.rkt:256:2 filter
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:140:0 Δ-up
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; caddr: contract violation
;   expected: (cons/c any/c (cons/c any/c pair?))
;   given: 'C
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:143:17
;   /usr/racket/collects/racket/private/list.rkt:256:2 filter
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:140:0 Δ-up
;   /usr/racket/collects/racket/private/list.rkt:242:4 foldr
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
>  (filter (lambda (ΓEntry) (elem? var (caddr ΓEntry) ) ) Γ-test-0) )
; Γ-test-0: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
> 
; :23:66: read-syntax: unexpected `)`
>  (filter (lambda (ΓEntry) (elem? var (caddr ΓEntry) ) ) Γ-test-0) )
; Γ-test-0: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
> 
; :24:66: read-syntax: unexpected `)`
> 
PegGEN-CT.rkt> 
PegGEN-CT.rkt> (filter (lambda (ΓEntry) (elem? var (caddr ΓEntry) ) ) Γ-test-0)
; var: undefined;
;  cannot reference an identifier before its definition
;   in module: "/home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt"
PegGEN-CT.rkt> (filter (lambda (ΓEntry) (elem? 'A (caddr ΓEntry) ) ) Γ-test-0)
'()
PegGEN-CT.rkt> (filter (lambda (ΓEntry) (elem? 'B (caddr ΓEntry) ) ) Γ-test-0)
'((A #t (B D)))
PegGEN-CT.rkt> (filter (lambda (ΓEntry) (elem? 'C (caddr ΓEntry) ) ) Γ-test-0)
'((B #f (C)))
PegGEN-CT.rkt> 
; /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:147:0: read-syntax: expected a `)` to close `(`
;   possible cause: indentation suggests a missing `)` before line 151
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/syntax/module-reader.rkt:190:25 loop
;   /usr/racket/collects/syntax/module-reader.rkt:183:2 wrap-internal
;   /usr/racket/collects/racket/../syntax/module-reader.rkt:65:9 lang:read-syntax
> 
; make-immutable-hash: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 0 to 1
;   given: 2
;   arguments...:
;    '(((A B C D) (A B C D)) ((A B C D) (A B C D)) ((A B C D) (A B C D)) ((A B C D) (A B C D)))
;    '(A B C D)
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
; make-immutable-hash: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 0 to 1
;   given: 2
;   arguments...:
;    '(((A B C D) (A B C D)) ((A B C D) (A B C D)) ((A B C D) (A B C D)) ((A B C D) (A B C D)))
;    '(A B C D)
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /home/elton/Dropbox/Devel/Leo-APEG/PEGRacket/PegGEN-CT.rkt:1:0 [running body]
> 
PegGEN-CT.rkt> (Δ-test-0)
; application: not a procedure;
;  expected a procedure that can be applied to arguments
;   given: '#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
;   arguments...: [none]
PegGEN-CT.rkt> Δ-test-0
'#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
PegGEN-CT.rkt> (Δ-up Δ-test-0 'A Γ-test-0 'D)
; hash-update: contract violation
;   expected: (any/c . -> . any/c)
;   given: '((A #t (B D)))
; Context (plain; to see better errortrace context, re-run with C-u prefix):
;   /usr/racket/collects/racket/private/more-scheme.rkt:358:4 hash-update
PegGEN-CT.rkt> 
; user break
PegGEN-CT.rkt> 
PegGEN-CT.rkt> 
PegGEN-CT.rkt> (Δ-up Δ-test-0 'A Γ-test-0 'D)
'#hash((A . (A (A #t (B D)))) (B . (B)) (C . (C)) (D . (D)))
PegGEN-CT.rkt> 
PegGEN-CT.rkt> (Δ-up Δ-test-0 'A Γ-test-0 'D)
'#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
PegGEN-CT.rkt> (Δ-up Δ-test-0 'D Γ-test-0 'A)
'#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
PegGEN-CT.rkt> (Δ-up Δ-test-0 'A Γ-test-0 'D)
'#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
PegGEN-CT.rkt> 
PegGEN-CT.rkt> (Δ-up Δ-test-0 'A Γ-test-0 'D)
'#hash((A . (A D)) (B . (B)) (C . (C)) (D . (D)))
PegGEN-CT.rkt> (Δ-up Δ-test-0 'D  Γ-test-0 'A)
'#hash((A . (A)) (B . (B)) (C . (C)) (D . (D)))
PegGEN-CT.rkt> (Δ-up Δ-test-0 'D  Γ-test-0 'C)
'#hash((A . (A)) (B . (B)) (C . (C)) (D . (D B C)))
PegGEN-CT.rkt> 
PegGEN-CT.rkt> (Δ-up Δ-test-0 'D  Γ-test-0 'C)
'#hash((A . (A)) (B . (B)) (C . (C)) (D . (B D A C)))
PegGEN-CT.rkt> (Δ-up Δ-test-0 'D  Γ-test-0 'C)
'#hash((A . (A)) (B . (B)) (C . (C)) (D . (B D A C)))
PegGEN-CT.rkt> 